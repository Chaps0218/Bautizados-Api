{
	"info": {
		"_postman_id": "9f88bc5d-88e7-40d3-b87c-68a9cfded84a",
		"name": "ExamenP3",
		"description": "Examen Tercer Parcial - Grupo 8\n\nIntegrantes:\n\n- Mathias Guevara\n    \n- Christopher Iza\n    \n- Shared Tinoco\n    \n\nEsta API ayuda a gestionar la información de las personas que han sido bautizadas dentro de la parroquia de preferencia.\n\nEsta API cuenta con mecanismos que evitan que se accedan a las rutas a menos que se ingrese sesión. Por motivos didácticos y para la calificación de este trabajo, se ha incluido de manera accessible el Endpoint para registrar. Sin embargo, la lógica real sería que solo un usuario con los permisos adecuados podría ingresar nuevos usuarios.\n\nEsperamos le guste :D.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27941478",
		"_collection_link": "https://warped-astronaut-348587.postman.co/workspace/a8627376-d30c-46f2-a4b3-525e1fc4465d/collection/27941478-9f88bc5d-88e7-40d3-b87c-68a9cfded84a?action=share&source=collection_link&creator=27941478"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response must have the required Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response message field is present\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usu_username\": \"usuAdmin\",\r\n    \"usu_password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"auth",
								"login"
							]
						},
						"description": "Esta función inicia sesión dentro del sistema. Se almacena una cookie dentro del postman y la mayoría de sistemas en la que se pruebe esta colección, incluyendo páginas web. En caso de que no sea este el caso, es necesario almacenar dicha cookie.\n\nDentro del body, es necesario el usuario y la contraseña como texto plano, el sistema almacena las contraseñas hasheadas."
					},
					"response": []
				},
				{
					"name": "Registrar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Description of the request is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usu_username\": \"usuarioPrueba24\",\r\n    \"usu_nombre\": \"nombre prueba\",\r\n    \"usu_establecimiento\": \"establecimiento prueba\",\r\n    \"usu_password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"auth",
								"register"
							]
						},
						"description": "Endpoint que se agregó para fines didácticos, esta función normalmente estaría disponible únicamente para superUsuarios, al no ser un sistema abierto."
					},
					"response": []
				}
			],
			"description": "Esta carpeta guarda relación con los endpoints referentes al inicio de sesión. Es necesario iniciar sesión para poder utilizar estos endpoints. Al crear un nuevo usuario, este se genera con el permiso mínimo por defecto, por lo que, a fin de calificar este trabajo, se recomienda usar el superUsuario definido en el informe que acompaña esta colección."
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Crear Rol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and rol_nombre\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('rol_nombre');",
									"});",
									"",
									"",
									"pm.test(\"Rol_nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.rol_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Rol_nombre should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rol_nombre\": \"Probando\",\r\n    \"rol_permisos\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/roles/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"roles",
								""
							]
						},
						"description": "Endpoint que permite crear un rol. Se necesita de un super Usuario para crear uno."
					},
					"response": []
				},
				{
					"name": "Get Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - rol_id, rol_nombre, and rol_permisos\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(role) {",
									"        pm.expect(role).to.have.property('rol_id');",
									"        pm.expect(role).to.have.property('rol_nombre');",
									"        pm.expect(role).to.have.property('rol_permisos');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Rol_id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  responseData.forEach(function(role) {",
									"    pm.expect(role.rol_id).to.be.a('number').that.is.not.below(0, \"Rol_id should be a non-negative integer\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Rol nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(role) {",
									"    pm.expect(role.rol_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Rol nombre should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Rol_permisos is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(role) {",
									"        pm.expect(role.rol_permisos).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/roles/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"roles",
								""
							]
						},
						"description": "Endpoint que devuelve todos los Roles. Se necesita del permiso mínimo para utilizarlo."
					},
					"response": []
				},
				{
					"name": "Get Rol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('rol_id');",
									"  pm.expect(responseData).to.have.property('rol_nombre');",
									"  pm.expect(responseData).to.have.property('rol_permisos');",
									"});",
									"",
									"",
									"pm.test(\"Rol_id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.rol_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Rol_id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Rol_nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.rol_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Rol_permisos is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.rol_permisos).to.be.a('number');",
									"    pm.expect(responseData.rol_permisos).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/roles/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"roles",
								"1"
							]
						},
						"description": "Endpoint que devuelve un único rol, buscándolo por su Id que viene como parámetro del URL. Se necesita del permiso mínimo para utilizarlo."
					},
					"response": []
				},
				{
					"name": "Modify Rol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rol_nombre\": \"Nombre modificado\",\r\n    \"rol_permisos\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/roles/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"roles",
								"3"
							]
						},
						"description": "Endpoint que modifica un rol. Es necesario enviar el Id del rol como parámetro del URL. Se necesita del permiso de un Super Usuario para utilizarlo."
					},
					"response": []
				},
				{
					"name": "Delete Rol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Description is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.message).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/roles/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"roles",
								"11"
							]
						},
						"description": "Endpoint que elimina un rol. Es necesario enviar el Id del rol como parámetro del URL. Se necesita del permiso de un Super Usuario para utilizarlo."
					},
					"response": []
				}
			],
			"description": "Esta carpeta hace referencia a todo el CRUD de los roles. Estos son accesibles únicamente si se ha iniciado sesión."
		},
		{
			"name": "Bautizado",
			"item": [
				{
					"name": "Create Bautizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message, id, and bau_nombre\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.bau_nombre).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bau_nombre\": \"Juan Pérez3\",\r\n  \"bau_padre\": \"Carlos Pérez\",\r\n  \"bau_madre\": \"María Gómez\",\r\n  \"bau_padrino1\": \"Luis Fernández\",\r\n  \"bau_padrino2\": \"Ana Martínez\",\r\n  \"bau_fecha\": \"2024-08-25\",\r\n  \"bau_tomo\": 1,\r\n  \"bau_pagina\": 15,\r\n  \"bau_numero\": 1001,\r\n  \"min_id\": 1,\r\n  \"usu_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/bautizados/createBautizado/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"bautizados",
								"createBautizado",
								""
							]
						},
						"description": "Endpoint que permite ingresar un bautizado. Se necesita de un usuario con el permiso para crear bautizados."
					},
					"response": []
				},
				{
					"name": "Get Bautizados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(bautizado) {",
									"        pm.expect(bautizado).to.have.property('bau_id');",
									"        pm.expect(bautizado).to.have.property('bau_nombre');",
									"        pm.expect(bautizado).to.have.property('bau_padre');",
									"        pm.expect(bautizado).to.have.property('bau_madre');",
									"        pm.expect(bautizado).to.have.property('bau_padrino1');",
									"        pm.expect(bautizado).to.have.property('bau_padrino2');",
									"        pm.expect(bautizado).to.have.property('bau_fecha');",
									"        pm.expect(bautizado).to.have.property('bau_tomo');",
									"        pm.expect(bautizado).to.have.property('bau_pagina');",
									"        pm.expect(bautizado).to.have.property('bau_numero');",
									"        pm.expect(bautizado).to.have.property('min_id');",
									"        pm.expect(bautizado).to.have.property('usu_id');",
									"    });",
									"});",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Bau id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(bautizado) {",
									"        pm.expect(bautizado.bau_id).to.be.a('number').and.to.satisfy((bau_id) => bau_id >= 0, \"Bau id should be non-negative\");",
									"        pm.expect(bautizado.bau_tomo).to.be.a('number').and.to.satisfy((bau_tomo) => bau_tomo >= 0, \"Bau tomo should be non-negative\");",
									"        pm.expect(bautizado.bau_pagina).to.be.a('number').and.to.satisfy((bau_pagina) => bau_pagina >= 0, \"Bau pagina should be non-negative\");",
									"        pm.expect(bautizado.bau_numero).to.be.a('number').and.to.satisfy((bau_numero) => bau_numero >= 0, \"Bau numero should be non-negative\");",
									"        pm.expect(bautizado.min_id).to.be.a('number').and.to.satisfy((min_id) => min_id >= 0, \"Min id should be non-negative\");",
									"        pm.expect(bautizado.usu_id).to.be.a('number').and.to.satisfy((usu_id) => usu_id >= 0, \"Usu id should be non-negative\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/bautizados/getBautizados/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"bautizados",
								"getBautizados",
								""
							]
						},
						"description": "Endpoint que regresa todos los bautizados. Se necesita el permiso mínimo para utilizarlo."
					},
					"response": []
				},
				{
					"name": "Get Bautizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('bau_id');",
									"    pm.expect(responseData).to.have.property('bau_nombre');",
									"    pm.expect(responseData).to.have.property('bau_padre');",
									"    pm.expect(responseData).to.have.property('bau_madre');",
									"    pm.expect(responseData).to.have.property('bau_padrino1');",
									"    pm.expect(responseData).to.have.property('bau_padrino2');",
									"    pm.expect(responseData).to.have.property('bau_fecha');",
									"    pm.expect(responseData).to.have.property('bau_tomo');",
									"    pm.expect(responseData).to.have.property('bau_pagina');",
									"    pm.expect(responseData).to.have.property('bau_numero');",
									"    pm.expect(responseData).to.have.property('min_id');",
									"    pm.expect(responseData).to.have.property('usu_id');",
									"});",
									"",
									"",
									"pm.test(\"Min_id and usu_id are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.min_id).to.be.a('number').and.to.be.at.least(0);",
									"  pm.expect(responseData.usu_id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/bautizados/getBautizadoById/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"bautizados",
								"getBautizadoById",
								"2"
							]
						},
						"description": "Endpoint que regresa un bautizado, buscándolo con el Id que viene como parámetro en el URL. Se necesita del permiso mínimo para utilizarlo."
					},
					"response": []
				},
				{
					"name": "Update Bautizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bau_nombre\": \"Juan Pérez2\",\r\n  \"bau_padre\": \"Carlos Pérez2\",\r\n  \"bau_madre\": \"María Gómez2\",\r\n  \"bau_padrino1\": \"Luis Fernández2\",\r\n  \"bau_padrino2\": \"Ana Martínez2\",\r\n  \"bau_fecha\": \"2024-08-26\",\r\n  \"bau_tomo\": 1,\r\n  \"bau_pagina\": 15,\r\n  \"bau_numero\": 1002,\r\n  \"min_id\": 1,\r\n  \"usu_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/bautizados/updateBautizado/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"bautizados",
								"updateBautizado",
								"2"
							]
						},
						"description": "Endpoint que permite modificar un bautizado. Se necesita de un usuario con el permiso para modificar bautizados."
					},
					"response": []
				},
				{
					"name": "Delete Bautizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Ensure user has required permission to delete baptized person\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/bautizados/deleteBautizado/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"bautizados",
								"deleteBautizado",
								"10"
							]
						},
						"description": "Endpoint que permite eliminar un bautizado. Se necesita de un usuario con el permiso para crear usuarios."
					},
					"response": []
				},
				{
					"name": "Generate Certificate",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/bautizados/generateCertificate/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"bautizados",
								"generateCertificate",
								"2"
							]
						},
						"description": "Genera un certificado de bautizo para un bautizado en concreto. Es necesario el permiso mínimo para utilizarlo"
					},
					"response": []
				}
			],
			"description": "Esta carpeta hace referencia a todo el CRUD de los bautizados dentro del sistema. Estos endpoints son accesibles únicamente si se ha iniciado sesión."
		},
		{
			"name": "Minsitro",
			"item": [
				{
					"name": "Create Ministro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and min_nombre\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.min_nombre).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Min_nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.min_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Min_nombre should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"min_nombre\": \"Ministro Postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/ministros/createMinistro",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"ministros",
								"createMinistro"
							]
						},
						"description": "Endpoint que permite crear ministros. Se necesita del permiso más alto para poder utilizarlo."
					},
					"response": []
				},
				{
					"name": "Get Ministros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - min_id and min_nombre\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(ministro) {",
									"        pm.expect(ministro).to.have.property('min_id');",
									"        pm.expect(ministro).to.have.property('min_nombre');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Min_id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(ministro) {",
									"        pm.expect(ministro.min_id).to.be.a('number').and.to.satisfy((min_id) => min_id >= 0, \"Min_id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Min_nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(ministro) {",
									"    pm.expect(ministro.min_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Min_nombre should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/ministros/getMinistros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"ministros",
								"getMinistros"
							]
						},
						"description": "Endpoint que devuelve todos los ministros. Se neccesita del permiso mínimo para poder utilizarlo."
					},
					"response": []
				},
				{
					"name": "Get Ministro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - min_id and min_nombre\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.min_id).to.exist;",
									"    pm.expect(responseData.min_nombre).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Min_id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.min_id).to.be.a('number');",
									"    pm.expect(responseData.min_id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Min_nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.min_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Min_nombre should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/ministros/getMinistro/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"ministros",
								"getMinistro",
								"2"
							]
						},
						"description": "Endpoint que devuelve un ministro, utilizando su Id para buscarlo, mismo que viene como parámetro del URL. Se neccesita del permiso mínimo para poder utilizarlo."
					},
					"response": []
				},
				{
					"name": "Update Ministro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message in the response is non-empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response message is descriptive and user-friendly\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"min_nombre\": \"Ministro Postman Modificado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8800/bauApi/ministros/updateMinistro/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"ministros",
								"updateMinistro",
								"2"
							]
						},
						"description": "Endpoint que permite modificar ministros. Se necesita del permiso más alto para utilizarlo."
					},
					"response": []
				},
				{
					"name": "Delete Ministro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8800/bauApi/ministros/deleteMinistro/23",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8800",
							"path": [
								"bauApi",
								"ministros",
								"deleteMinistro",
								"23"
							]
						},
						"description": "Endpoint que permite eliminar ministros. Se necesita del permiso más alto para utilizarlo."
					},
					"response": []
				}
			],
			"description": "Endpoints que hacen referencia al CRUD de ministros. Se necesita estar loggeado para utilizarlos."
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has a valid Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Verify that the session cookie has been deleted after logout\", function () {",
							"    pm.expect(pm.response.cookies.has('session')).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8800/bauApi/auth/logout",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8800",
					"path": [
						"bauApi",
						"auth",
						"logout"
					]
				},
				"description": "Endpoint que permite cerrar la sesión dentro de la API. Borra la cookie que el inicio de sesión guarda."
			},
			"response": []
		}
	]
}